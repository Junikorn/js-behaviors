{"version":3,"sources":["event-bus-listener-behavior.js"],"names":[],"mappings":";;;;;;AAAA,CAAC,YAAU;AACP,gBAAY,CAAC;;AAEb,UAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC;;AAE5B,QAAI,UAAU,GAAG,EAAE,CAAC;;QAEd,iBAAiB;AACR,iBADT,iBAAiB,CACP,OAAO,EAAE;kCADnB,iBAAiB;;AAEf,gBAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACpB,gBAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SAC1B;;;;;;;;;;;;;qBAJC,iBAAiB;;mBAQf,cAAC,KAAK,EAAE,IAAI,EAAC;;;AACb,0BAAU,CAAC,OAAO,CAAC,UAAC,GAAG,EAAK;AACxB,wBAAG,GAAG,CAAC,KAAK,CAAC,EAAC;AACV,2BAAG,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAK;AACxB,gCAAG;AACC,mCAAG,CAAC;AACA,wCAAI,EAAE,KAAK;AACX,0CAAM,EAAE,IAAI;AACZ,6CAAS,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;AAC/B,iDAAa,EAAE,MAAK,OAAO;iCAC9B,CAAC,CAAC;6BACN,CAAA,OAAM,CAAC,EAAC;AACL,uCAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;6BACnB;yBACJ,CAAC,CAAC;qBACN;iBACJ,CAAC,CAAC;aACN;;;;;;;mBAIe,0BAAC,KAAK,EAAE,QAAQ,EAAC;AAC7B,oBAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AACpD,oBAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrC,uBAAO;AACH,qBAAC,EAAE,KAAK;AACR,qBAAC,EAAE,QAAQ;iBACd,CAAC;aACL;;;;;;;mBAIkB,6BAAC,UAAU,EAAC;AAC3B,oBAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;oBACpC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACxC,qBAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aAC1B;;;;;;;mBAIQ,qBAAE;AACP,0BAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACnC;;;;;;;mBAIU,uBAAE;AACT,0BAAU,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;aAC5D;;;;;;;iBAIa,eAAE;AACZ,uBAAO,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;aAClD;;;eA9DC,iBAAiB;;;AAuEvB,MAAE,CAAC,wBAAwB,GAAG;AAC1B,kBAAU,EAAE;;;;;;;;;;;;;;AAcR,cAAE,EAAE;AACA,oBAAI,EAAE,MAAM;AACZ,qBAAK,EAAE,iBAAU;AACb,2BAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;iBACtC;aACJ;SACJ;AACD,gBAAQ,EAAA,oBAAE;AACN,gBAAI,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC;SACvB;AACD,gBAAQ,EAAA,oBAAE;AACN,gBAAI,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC;SACzB;KACJ,CAAC;CAEL,CAAA,EAAG,CAAC","file":"event-bus-listener-behavior.js","sourcesContent":["(function(){\r\n    'use strict';\r\n\r\n    window.JS = window.JS || {};\r\n\r\n    var connectors = []; //list of all subscribed connectors\r\n\r\n    class EventBusConnector{\r\n        constructor(element) {\r\n            this.connector = {};\r\n            this.element = element;\r\n        }\r\n        /**\r\n         * @method $e.fire\r\n         */\r\n        fire(event, data){\r\n            connectors.forEach((val) => {\r\n                if(val[event]){\r\n                    val[event].forEach((val) => {\r\n                        try{\r\n                            val({\r\n                                type: event,\r\n                                detail: data,\r\n                                timeStamp: new Date().getTime(),\r\n                                sourceElement: this.element\r\n                            });\r\n                        }catch(e){\r\n                            console.warn(e);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * @method $e.addEventListener\r\n         */\r\n        addEventListener(event, callback){\r\n            this.connector[event] = this.connector[event] || [];\r\n            this.connector[event].push(callback);\r\n            return {\r\n                e: event,\r\n                c: callback\r\n            };\r\n        }\r\n        /**\r\n         * @method $e.removeEventListener\r\n         */\r\n        removeEventListener(descriptor){\r\n            var array = this.connector[descriptor.e],\r\n                index = array.indexOf(descriptor.c);\r\n            array.splice(index, 1);\r\n        }\r\n        /**\r\n         * @method $e.subscribe\r\n         */\r\n        subscribe(){\r\n            connectors.push(this.connector);\r\n        }\r\n        /**\r\n         * @method $e.unsubscribe\r\n         */\r\n        unsubscribe(){\r\n            connectors.splice(connectors.indexOf(this.connector), 1);\r\n        }\r\n        /**\r\n         * @property $e.subscribed\r\n         */\r\n        get subscribed(){\r\n            return connectors.indexOf(this.connector) > -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * `JS.EventBusListenerBehavior` allows to use `$e` property as event bus connecting all listeners.\r\n     * Behavior replaces `<iron-signals>` element functionality without the need of adding any markup to extended elements `<template>`\r\n     *\r\n     * @polymerBehavior JS.EventBusListenerBehavior\r\n     */\r\n    JS.EventBusListenerBehavior = {\r\n        properties: {\r\n            /**\r\n             * EventBusConnector instance\r\n             *\r\n             * Available methods:\r\n             * - `addEventListener(eventName, callback)` - adds event listener to bus and returns EventListenerDescriptor\r\n             * - `removeEventListener(eventListenerDescriptor)` - removes event listener from bus\r\n             * - `fire(eventName, details)` - fires event on bus\r\n             * - `unsubscribe()` - unsubscribes from event bus\r\n             * - `subscribe()` - subscribes to event bus\r\n             *\r\n             * You can also check property `subscribed` for current subscription status\r\n             * @default new EventBusConnector()\r\n             */\r\n            $e: {\r\n                type: Object,\r\n                value: function(){\r\n                    return new EventBusConnector(this);\r\n                }\r\n            }\r\n        },\r\n        attached(){\r\n            this.$e.subscribe();\r\n        },\r\n        detached(){\r\n            this.$e.unsubscribe();\r\n        }\r\n    };\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}