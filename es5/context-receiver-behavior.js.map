{"version":3,"sources":["context-receiver-behavior.js"],"names":[],"mappings":";;AAAA,CAAC,YAAU;AACP,gBAAY,CAAC;;AAEb,UAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC;;;;;;;AAO5B,MAAE,CAAC,2BAA2B,GAAG;AAC7B,kBAAU,EAAE;;;;;;;;AAQR,cAAE,EAAE,MAAM;AACV,sBAAU,EAAE;AACR,oBAAI,EAAE,KAAK;AACX,qBAAK,EAAE;2BAAM,EAAE;iBAAA;aAClB;AACD,uBAAW,EAAE,MAAM;SACtB;AACD,iBAAS,EAAE,CAAC,yBAAyB,CAAC;AACtC,gBAAQ,EAAA,oBAAE;;;;;;;AAKN,gBAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;AAClD,gBAAI,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,UAAC,CAAC,EAAK;AAClE,sBAAK,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AAC/B,sBAAK,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAClD,CAAC,CAAC;SACN;AACD,gBAAQ,EAAA,oBAAE;AACN,gBAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACjD;AACD,yBAAiB,EAAA,2BAAC,CAAC,EAAC;AAChB,gBAAG,IAAI,CAAC,EAAE,EAAC;AACP,oBAAI,eAAe,GAAG,IAAI,CAAC,UAAU;oBACjC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAA,MAAM;2BAAI,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK;iBAAA,CAAC,CAAC;AACxG,oBAAG,CAAC,cAAc,EAAC;AACf,wBAAI,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;iBACrE,MAAI;AACD,mCAAe,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;iBACtE;aACJ;SACJ;KACJ,CAAC;AACF,MAAE,CAAC,uBAAuB,GAAG,CAAC,EAAE,CAAC,2BAA2B,EAAE,EAAE,CAAC,wBAAwB,CAAC,CAAC;CAE9F,CAAA,EAAG,CAAC","file":"context-receiver-behavior.js","sourcesContent":["(function(){\r\n    'use strict';\r\n\r\n    window.JS = window.JS || {};\r\n\r\n    /**\r\n     * `JS.ContextReceiverBehavior` allows to synchronise element with context (`$c`) provided by parent element extending `JS.ContextProviderBehavior`\r\n     *\r\n     * @polymerBehavior JS.ContextReceiverBehavior\r\n     */\r\n    JS.ContextReceiverBehaviorImpl = {\r\n        properties: {\r\n            /**\r\n             * Synchronised context object\r\n             *\r\n             * Available methods:\r\n             * - `set(path, value)` - set context path value & trigger change notification on all subscribed elements\r\n             * - `notifyPath(path, value)` - trigger path change notification on all subscribed elements\r\n             */\r\n            $c: Object,\r\n            _$cChanges: {\r\n                type: Array,\r\n                value: () => []\r\n            },\r\n            _$cListener: Object\r\n        },\r\n        observers: ['_$cContextChanged($c.*)'],\r\n        attached(){\r\n            /**\r\n             * Fired when element is attached. Subscribes to parent context\r\n             * @event context-required\r\n             */\r\n            this.fire('context-required', { receiver: this });\r\n            this._$cListener = this.$e.addEventListener('context-changed', (e) => {\r\n                this._$cChanges.push(e.detail);\r\n                this.notifyPath(e.detail.path, e.detail.value);\r\n            });\r\n        },\r\n        detached(){\r\n            this.$e.removeEventListener(this._$cListener);\r\n        },\r\n        _$cContextChanged(e){\r\n            if(this.$e){\r\n                var externalChanges = this._$cChanges,\r\n                    externalChange = this._$cChanges.find(change => change.path === e.path && change.value === e.value);\r\n                if(!externalChange){\r\n                    this.$e.fire('context-changed', { path: e.path, value: e.value });\r\n                }else{\r\n                    externalChanges.splice(externalChanges.indexOf(externalChange), 1);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    JS.ContextReceiverBehavior = [JS.ContextReceiverBehaviorImpl, JS.EventBusListenerBehavior];\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}