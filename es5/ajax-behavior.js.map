{"version":3,"sources":["ajax-behavior.js"],"names":[],"mappings":"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","file":"ajax-behavior.js","sourcesContent":["(function(){\r\n    'use strict';\r\n\r\n    window.JS = window.JS || {};\r\n\r\n    var fileRegex = /^file:\\/\\//i;\r\n\r\n    /**\r\n     * Class providing reasonable XHR handling based on `<iron-request>` with some minor tweaks\r\n     *\r\n     * `<iron-request>` BSD License by Polymer Project Authors:\r\n     * `This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt`\r\n     * `The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt`\r\n     * `The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt`\r\n     *\r\n     * @class Request\r\n     */\r\n    class Request {\r\n        constructor(options) {\r\n            //options processing\r\n            this.url = options.url;\r\n            this.async = (typeof(options.async) !== 'undefined') ? options.async : true;\r\n            this.withCredentials = (typeof(options.withCredentials) !== 'undefined') ?\r\n                options.withCredentials : true;\r\n            this.method = options.method && options.method.toUpperCase() || 'GET';\r\n            this.params = options.params || {};\r\n            this.body = options.body;\r\n            this.headers = options.headers || {};\r\n            if(this.method !== 'GET'){\r\n                this.headers['Content-Type'] = this.headers['Content-Type'] ||\r\n                (typeof(options.body) === 'string') ? 'application/x-www-form-urlencoded' : 'application/json';\r\n            }\r\n            this.handleAs = options.handleAs;\r\n\r\n            //request construction\r\n            this.promise = new Promise((resolve, reject) => {\r\n                this.resolve = resolve;\r\n                this.reject = reject;\r\n            });\r\n            this.promise.$request = this;\r\n            this.xhr = new XMLHttpRequest();\r\n            this.status = 0;\r\n\r\n            var xhr = this.xhr;\r\n\r\n            xhr.addEventListener('readystatechange', () => {\r\n                if (xhr.readyState === 4 && !this.aborted) {\r\n                    this._updateStatus();\r\n                    try {\r\n                        this.response = this.parseResponse();\r\n                    } catch (e) {}\r\n\r\n                    if (!this.succeeded) {\r\n                        var error = new Error('The request failed with status code: ' + this.xhr.status);\r\n                        error.$request = this;\r\n                        return this.reject(error);\r\n                    }\r\n\r\n                    var response = this.response || {};\r\n                    Object.defineProperty(response, '$request', {\r\n                        enumerable: false, value: this\r\n                    });\r\n\r\n                    this.resolve(response);\r\n                }\r\n            });\r\n\r\n            xhr.addEventListener('progress', (progress) => {\r\n                this.progress = {\r\n                    lengthComputable: progress.lengthComputable,\r\n                    loaded: progress.loaded,\r\n                    total: progress.total\r\n                };\r\n            });\r\n\r\n            xhr.addEventListener('error', (error) => {\r\n                this._updateStatus();\r\n                error.$request = this;\r\n                this.reject(error);\r\n            });\r\n\r\n            xhr.addEventListener('abort', () => {\r\n                this._updateStatus();\r\n                var error = new Error('Request aborted.');\r\n                error.$request = this;\r\n                this.reject(error);\r\n            });\r\n\r\n            xhr.open(this.method, this.requestUrl, this.async);\r\n\r\n            if (this.headers) {\r\n                Object.keys(this.headers).forEach((requestHeader) => {\r\n                    xhr.setRequestHeader(requestHeader, this.headers[requestHeader]);\r\n                });\r\n            }\r\n\r\n            var contentType;\r\n            if (this.headers) {\r\n                contentType = this.headers['Content-Type'];\r\n            }\r\n            this.encodedBody = this._encodeBodyObject(this.body, contentType);\r\n\r\n            // In IE, `xhr.responseType` is an empty string when the response\r\n            // returns. Hence, caching it as `xhr._responseType`.\r\n            xhr.responseType = xhr._responseType = (this.handleAs || 'json');\r\n            xhr.withCredentials = this.withCredentials;\r\n        }\r\n        /**\r\n         * Method encoding body based on content type\r\n         * @param {String|Object} body\r\n         * @param {String} contentType\r\n         */\r\n        _encodeBodyObject(body, contentType) {\r\n            if(typeof body === 'string') {\r\n                return body;  // Already encoded.\r\n            }\r\n            var bodyObj = /** @type {Object} */ (body);\r\n            switch (contentType) {\r\n                case('application/json'):\r\n                    return JSON.stringify(bodyObj);\r\n                case('application/x-www-form-urlencoded'):\r\n                    return this._wwwFormUrlEncode(bodyObj);\r\n            }\r\n            return body;\r\n        }\r\n        /**\r\n         * Method updating status of request based on xhr values\r\n         */\r\n        _updateStatus() {\r\n            this.status = this.xhr.status;\r\n            this.statusText = (typeof(this.xhr.statusText) === 'undefined') ? '' : this.xhr.statusText;\r\n        }\r\n        /**\r\n         * Method encoding form data object into XHR compatible body string\r\n         * @param {Object} [object] - form data object\r\n         * @returns {String} encoded string\r\n         */\r\n        _wwwFormUrlEncode(object) {\r\n            if (!object) {\r\n                return '';\r\n            }\r\n            var pieces = [];\r\n            Object.keys(object).forEach((key) => {\r\n                pieces.push(this._wwwFormUrlEncodePiece(key) + '=' + this._wwwFormUrlEncodePiece(object[key]));\r\n            });\r\n            return pieces.join('&');\r\n        }\r\n        _wwwFormUrlEncodePiece(str) {\r\n            return encodeURIComponent(str.toString().replace(/\\r?\\n/g, '\\r\\n')).replace(/%20/g, '+');\r\n        }\r\n        /**\r\n         * Method aborting request\r\n         */\r\n        abort() {\r\n            this.aborted = true;\r\n            this.xhr.abort();\r\n        }\r\n        /**\r\n         * Method triggering XHR send\r\n         * @returns {Promise} request promise\r\n         */\r\n        send() {\r\n            this.xhr.send(this.encodedBody);\r\n            return this.promise;\r\n        }\r\n        /**\r\n         * Method parsing response. Rejects request if response cannot be  parsed\r\n         * @returns {Object|String} parsed response\r\n         */\r\n        parseResponse() {\r\n            var xhr = this.xhr;\r\n            var responseType = this.xhr.responseType || this.xhr._responseType;\r\n            // If we don't have a natural `xhr.responseType`, we prefer parsing\r\n            // `xhr.responseText` over returning `xhr.response`..\r\n            var preferResponseText = !this.xhr.responseType;\r\n\r\n            try {\r\n                switch (responseType) {\r\n                    case 'json':\r\n                        // If xhr.response is undefined, responseType `json` may\r\n                        // not be supported.\r\n                        if (preferResponseText || xhr.response === undefined) {\r\n                            // If accessing `xhr.responseText` throws, responseType `json`\r\n                            // is supported and the result is rightly `undefined`.\r\n                            try {\r\n                                /* jshint ignore:start */\r\n                                xhr.responseText;\r\n                                /* jshint ignore:end */\r\n                            } catch (e) {\r\n                                return xhr.response;\r\n                            }\r\n\r\n                            // Otherwise, attempt to parse `xhr.responseText` as JSON.\r\n                            if (xhr.responseText) {\r\n                                return JSON.parse(xhr.responseText);\r\n                            }\r\n                        }\r\n\r\n                        return xhr.response;\r\n                    case 'xml':\r\n                        return xhr.responseXML;\r\n                    case 'blob':\r\n                    case 'document':\r\n                    case 'arraybuffer':\r\n                        return xhr.response;\r\n                    case 'text':\r\n                        return xhr.responseText;\r\n                    default:\r\n                        return xhr.responseText;\r\n                }\r\n            } catch (e) {\r\n                this.reject(new Error('Could not parse response. ' + e.message));\r\n            }\r\n        }\r\n        /**\r\n         * Getter creating query string from request params\r\n         * @returns {String} request URL with query string\r\n         **/\r\n        get requestUrl() {\r\n            var queryParts = [],\r\n                param,\r\n                value;\r\n\r\n            for (param in this.params) {\r\n                if (this.params.hasOwnProperty(param)) {\r\n                    value = this.params[param];\r\n                    param = window.encodeURIComponent(param);\r\n                    if (value !== null) {\r\n                        param += '=' + window.encodeURIComponent(value);\r\n                    }\r\n                    queryParts.push(param);\r\n                }\r\n            }\r\n\r\n            return this.url + (queryParts.length ? '?' + queryParts.join('&') : '');\r\n        }\r\n        /**\r\n         * Getter checking if request succeeded\r\n         * @returns {Boolean} succeeded\r\n         */\r\n        get succeeded() {\r\n            var status = this.xhr.status || 0;\r\n            // Note: if we are using the file:// protocol, the status code will be 0\r\n            // for all outcomes (successful or otherwise).\r\n            return (fileRegex.test(this.url) && status === 0) || (status >= 200 && status < 300);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @method $http\r\n     * @param {Object} options\r\n     * @returns {Promise} request promise\r\n     */\r\n    function ajax(options){\r\n        /*jshint validthis:true */\r\n        var request = new Request(options),\r\n            promise = request.send();\r\n        if(typeof(this) !== 'undefined' && this.__isPolymerInstance__){ //if called from polymer element scope\r\n            this.fire('request-sent', request);\r\n        }\r\n\r\n        ajax.interceptors.forEach((interceptor) => {\r\n            if(interceptor.res && interceptor.rej || interceptor.res){\r\n                promise.then(interceptor.res, interceptor.rej);\r\n            }else{\r\n                promise.catch(interceptor.rej);\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    ajax.interceptors = [];\r\n\r\n    //utility method\r\n    function prepareOptions(options, body){\r\n        return (typeof(options) === 'string') ? {\r\n            url: options,\r\n            body: body\r\n        } : options;\r\n    }\r\n\r\n    //shortcut methods\r\n    /**\r\n     * @method $http.get\r\n     * @param {Object|String} options - options hash map or target url\r\n     * @param {Object} [body] - body if options were URL string\r\n     * @returns {Promise} request promise\r\n     */\r\n    ajax.get = function ajaxGet(options, body){\r\n        return ajax.call(this, prepareOptions(options, body));\r\n    };\r\n\r\n    /**\r\n     * @method $http.post\r\n     * @param {Object|String} options - options hash map or target url\r\n     * @param {Object} [body] - body if options were URL string\r\n     * @returns {Promise} request promise\r\n     */\r\n    ajax.post = function ajaxPost(options, body){\r\n        options = prepareOptions(options, body);\r\n        options.method = 'POST';\r\n        return ajax.call(this, options);\r\n    };\r\n\r\n    /**\r\n     * @method $http.put\r\n     * @param {Object|String} options - options hash map or target url\r\n     * @param {Object} [body] - body if options were URL string\r\n     * @returns {Promise} request promise\r\n     */\r\n    ajax.put = function ajaxPut(options, body){\r\n        options = prepareOptions(options, body);\r\n        options.method = 'PUT';\r\n        return ajax.call(this, options);\r\n    };\r\n\r\n    /**\r\n     * @method $http.delete\r\n     * @param {Object|String} options - options hash map or target url\r\n     * @param {Object} [body] - body if options were URL string\r\n     * @returns {Promise} request promise\r\n     */\r\n    ajax['delete'] = function ajaxDelete(options, body){\r\n        options = prepareOptions(options, body);\r\n        options.method = 'DELETE';\r\n        return ajax.call(this, options);\r\n    };\r\n\r\n    /**\r\n     * @method $http.intercept\r\n     * @param {Function} resolvedInterceptor\r\n     * @param {Function} rejectedInterceptor\r\n     */\r\n    ajax.intercept = function intercept(resolvedInterceptor, rejectedInterceptor){\r\n        ajax.interceptors.push({\r\n            res: resolvedInterceptor,\r\n            rej: rejectedInterceptor\r\n        });\r\n    };\r\n\r\n    /**\r\n     * `JS.AjaxBehavior` allows to send requests with ajax without using elements declared in template such as `<iron-ajax>`.\r\n     * It provides $http method returning request Promise and 4 shortcut methods for all http methods.\r\n     *\r\n     * @polymerBehavior JS.AjaxBehavior\r\n     */\r\n    JS.AjaxBehavior = {\r\n        attached(){\r\n            this.$http = ajax;\r\n        },\r\n        /**\r\n         * Method performing ajax request based on passed configuration. Returns request Promise\r\n         *\r\n         * Options that can be passed:\r\n         * - `{String} url`\r\n         * - `{Object|String} body`\r\n         * - `{String} [method='GET']`\r\n         * - `{Object} [headers]`\r\n         * - `{Object} [params]`\r\n         * - `{Boolean} [async=true]`\r\n         * - `{Boolean} [withCredentials=true]`\r\n         * - `{String} [handleAs='json']`\r\n         *\r\n         * You can also use it through shortcut methods:\r\n         * - `$http.get(options|url, [body])`\r\n         * - `$http.post(options|url, [body])`\r\n         * - `$http.put(options|url, [body])`\r\n         * - `$http.delete(options|url, [body])`\r\n         *\r\n         * The shortcut methods write selected method into options and allow to use shorter form of call with default parameters `$http.{method}(url, body)`\r\n         *\r\n         * @param {Object} options\r\n         * @param {String} options.url\r\n         * @param {Object|String} options.body\r\n         * @param {String} [options.method='GET'] - GET, POST, PUT or DELETE\r\n         * @param {Object} [options.headers]\r\n         * @param {Object} [options.params]\r\n         * @param {Boolean} [options.async=true] - if call has to be async (true by default)\r\n         * @param {Boolean} [options.withCredentials=true]\r\n         * @param {String} [options.handleAs='json']\r\n         * @returns {Promise} request promise\r\n         **/\r\n        $http: ajax\r\n        /**\r\n         * Fired when XHR request is sent\r\n         * @event request-sent\r\n         */\r\n    };\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}