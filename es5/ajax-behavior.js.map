{"version":3,"sources":["ajax-behavior.js"],"names":[],"mappings":"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","file":"ajax-behavior.js","sourcesContent":["(function(){\n    'use strict';\n\n    window.JS = window.JS || {};\n\n    /**\n     * Class providing reasonable XHR handling based on `<iron-request>` with some minor tweaks\n     *\n     * `<iron-request>` BSD License by Polymer Project Authors:\n     * `This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt`\n     * `The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt`\n     * `The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt`\n     *\n     * @class Request\n     */\n    class Request {\n        constructor(options) {\n            //options processing\n            this.url = options.url;\n            this.async = (typeof(options.async) !== 'undefined') ? options.async : true;\n            this.withCredentials = (typeof(options.withCredentials) !== 'undefined') ?\n                options.withCredentials : true;\n            this.method = options.method && options.method.toUpperCase() || 'GET';\n            this.params = options.params || {};\n            this.body = options.body;\n            this.headers = options.headers || {};\n            if(this.method !== 'GET'){\n                this.headers['Content-Type'] = this.headers['Content-Type'] ||\n                (typeof(options.body) === 'string') ? 'application/x-www-form-urlencoded' : 'application/json';\n            }\n            this.handleAs = options.handleAs;\n\n            //request construction\n            this.promise = new Promise((resolve, reject) => {\n                this.resolve = resolve;\n                this.reject = reject;\n            });\n            this.promise.$request = this;\n            this.xhr = new XMLHttpRequest();\n            this.status = 0;\n\n            var xhr = this.xhr;\n\n            xhr.addEventListener('readystatechange', () => {\n                if (xhr.readyState === 4 && !this.aborted) {\n                    this._updateStatus();\n                    try {\n                        this.response = this.parseResponse();\n                    } catch (e) {}\n\n                    if (!this.succeeded) {\n                        var error = new Error('The request failed with status code: ' + this.xhr.status);\n                        error.$request = this;\n                        return this.reject(error);\n                    }\n\n                    var response = this.response || {};\n                    Object.defineProperty(response, '$request', {\n                        enumerable: false, value: this\n                    });\n\n                    this.resolve(response);\n                }\n            });\n\n            xhr.addEventListener('progress', (progress) => {\n                this.progress = {\n                    lengthComputable: progress.lengthComputable,\n                    loaded: progress.loaded,\n                    total: progress.total\n                };\n            });\n\n            xhr.addEventListener('error', (error) => {\n                this._updateStatus();\n                error.$request = this;\n                this.reject(error);\n            });\n\n            xhr.addEventListener('abort', () => {\n                this._updateStatus();\n                var error = new Error('Request aborted.');\n                error.$request = this;\n                this.reject(error);\n            });\n\n            xhr.open(this.method, this.requestUrl, this.async);\n\n            if (this.headers) {\n                Object.keys(this.headers).forEach((requestHeader) => {\n                    xhr.setRequestHeader(requestHeader, this.headers[requestHeader]);\n                });\n            }\n\n            var contentType;\n            if (this.headers) {\n                contentType = this.headers['Content-Type'];\n            }\n            this.encodedBody = this._encodeBodyObject(this.body, contentType);\n\n            // In IE, `xhr.responseType` is an empty string when the response\n            // returns. Hence, caching it as `xhr._responseType`.\n            xhr.responseType = xhr._responseType = (this.handleAs || 'json');\n            xhr.withCredentials = this.withCredentials;\n        }\n        /**\n         * Method encoding body based on content type\n         * @param {String|Object} body\n         * @param {String} contentType\n         */\n        _encodeBodyObject(body, contentType) {\n            if(typeof body === 'string') {\n                return body;  // Already encoded.\n            }\n            var bodyObj = /** @type {Object} */ (body);\n            switch (contentType) {\n                case('application/json'):\n                    return JSON.stringify(bodyObj);\n                case('application/x-www-form-urlencoded'):\n                    return this._wwwFormUrlEncode(bodyObj);\n            }\n            return body;\n        }\n        /**\n         * Method updating status of request based on xhr values\n         */\n        _updateStatus() {\n            this.status = this.xhr.status;\n            this.statusText = (typeof(this.xhr.statusText) === 'undefined') ? '' : this.xhr.statusText;\n        }\n        /**\n         * Method encoding form data object into XHR compatible body string\n         * @param {Object} [object] - form data object\n         * @returns {String} encoded string\n         */\n        _wwwFormUrlEncode(object) {\n            if (!object) {\n                return '';\n            }\n            var pieces = [];\n            Object.keys(object).forEach((key) => {\n                pieces.push(this._wwwFormUrlEncodePiece(key) + '=' + this._wwwFormUrlEncodePiece(object[key]));\n            });\n            return pieces.join('&');\n        }\n        _wwwFormUrlEncodePiece(str) {\n            return encodeURIComponent(str.toString().replace(/\\r?\\n/g, '\\r\\n')).replace(/%20/g, '+');\n        }\n        /**\n         * Method aborting request\n         */\n        abort() {\n            this.aborted = true;\n            this.xhr.abort();\n        }\n        /**\n         * Method triggering XHR send\n         * @returns {Promise} request promise\n         */\n        send() {\n            this.xhr.send(this.encodedBody);\n            return this.promise;\n        }\n        /**\n         * Method parsing response. Rejects request if response cannot be  parsed\n         * @returns {Object|String} parsed response\n         */\n        parseResponse() {\n            var xhr = this.xhr;\n            var responseType = this.xhr.responseType || this.xhr._responseType;\n            // If we don't have a natural `xhr.responseType`, we prefer parsing\n            // `xhr.responseText` over returning `xhr.response`..\n            var preferResponseText = !this.xhr.responseType;\n\n            try {\n                switch (responseType) {\n                    case 'json':\n                        // If xhr.response is undefined, responseType `json` may\n                        // not be supported.\n                        if (preferResponseText || xhr.response === undefined) {\n                            // If accessing `xhr.responseText` throws, responseType `json`\n                            // is supported and the result is rightly `undefined`.\n                            try {\n                                /* jshint ignore:start */\n                                xhr.responseText;\n                                /* jshint ignore:end */\n                            } catch (e) {\n                                return xhr.response;\n                            }\n\n                            // Otherwise, attempt to parse `xhr.responseText` as JSON.\n                            if (xhr.responseText) {\n                                return JSON.parse(xhr.responseText);\n                            }\n                        }\n\n                        return xhr.response;\n                    case 'xml':\n                        return xhr.responseXML;\n                    case 'blob':\n                    case 'document':\n                    case 'arraybuffer':\n                        return xhr.response;\n                    case 'text':\n                        return xhr.responseText;\n                    default:\n                        return xhr.responseText;\n                }\n            } catch (e) {\n                this.reject(new Error('Could not parse response. ' + e.message));\n            }\n        }\n        /**\n         * Getter creating query string from request params\n         * @returns {String} request URL with query string\n         **/\n        get requestUrl() {\n            var queryParts = [],\n                param,\n                value;\n\n            for (param in this.params) {\n                if (this.params.hasOwnProperty(param)) {\n                    value = this.params[param];\n                    param = window.encodeURIComponent(param);\n                    if (value !== null) {\n                        param += '=' + window.encodeURIComponent(value);\n                    }\n                    queryParts.push(param);\n                }\n            }\n\n            return this.url + (queryParts.length ? '?' + queryParts.join('&') : '');\n        }\n        /**\n         * Getter checking if request succeeded\n         * @returns {Boolean} succeeded\n         */\n        get succeeded() {\n            var status = this.xhr.status || 0;\n            // Note: if we are using the file:// protocol, the status code will be 0\n            // for all outcomes (successful or otherwise).\n            return status === 0 || (status >= 200 && status < 300);\n        }\n    }\n\n    /**\n     * @method $http\n     * @param {Object} options\n     */\n    function ajax(options){\n        /*jshint validthis:true */\n        var request = new Request(options);\n        if(typeof(this) !== 'undefined' && this.__isPolymerInstance__){ //if called from polymer element scope\n            this.fire('request-sent', request);\n        }\n\n        return request.send();\n    }\n\n    //utility method\n    function prepareOptions(options, body){\n        return (typeof(options) === 'string') ? {\n            url: options,\n            body: body\n        } : options;\n    }\n\n    //shortcut methods\n    /**\n     * @method $http.get\n     * @param {Object|String} options - options hash map or target url\n     * @param {Object} [body] - body if options were URL string\n     */\n    ajax.get = function ajaxGet(options, body){\n        return ajax.call(this, prepareOptions(options, body));\n    };\n\n    /**\n     * @method $http.post\n     * @param {Object|String} options - options hash map or target url\n     * @param {Object} [body] - body if options were URL string\n     */\n    ajax.post = function ajaxPost(options, body){\n        options = prepareOptions(options, body);\n        options.method = 'POST';\n        return ajax.call(this, options);\n    };\n\n    /**\n     * @method $http.put\n     * @param {Object|String} options - options hash map or target url\n     * @param {Object} [body] - body if options were URL string\n     */\n    ajax.put = function ajaxPut(options, body){\n        options = prepareOptions(options, body);\n        options.method = 'PUT';\n        return ajax.call(this, options);\n    };\n\n    /**\n     * @method $http.delete\n     * @param {Object|String} options - options hash map or target url\n     * @param {Object} [body] - body if options were URL string\n     */\n    ajax['delete'] = function ajaxDelete(options, body){\n        options = prepareOptions(options, body);\n        options.method = 'DELETE';\n        return ajax.call(this, options);\n    };\n\n    /**\n     * `JS.AjaxBehavior` allows to send requests with ajax without using elements declared in template such as `<iron-ajax>`.\n     * It provides $http method returning request Promise and 4 shortcut methods for all http methods.\n     *\n     * @polymerBehavior JS.AjaxBehavior\n     */\n    JS.AjaxBehavior = {\n        attached(){\n            this.$http = ajax;\n        },\n        /**\n         * Method performing ajax request based on passed configuration. Returns request Promise\n         *\n         * Options that can be passed:\n         * - `{String} url`\n         * - `{Object|String} body`\n         * - `{String} [method='GET']`\n         * - `{Object} [headers]`\n         * - `{Object} [params]`\n         * - `{Boolean} [async=true]`\n         * - `{Boolean} [withCredentials=true]`\n         * - `{String} [handleAs='json']`\n         *\n         * You can also use it through shortcut methods:\n         * - `$http.get(options|url, [body])`\n         * - `$http.post(options|url, [body])`\n         * - `$http.put(options|url, [body])`\n         * - `$http.delete(options|url, [body])`\n         *\n         * The shortcut methods write selected method into options and allow to use shorter form of call with default parameters `$http.{method}(url, body)`\n         *\n         * @param {Object} options\n         * @param {String} options.url\n         * @param {Object|String} options.body\n         * @param {String} [options.method='GET'] - GET, POST, PUT or DELETE\n         * @param {Object} [options.headers]\n         * @param {Object} [options.params]\n         * @param {Boolean} [options.async=true] - if call has to be async (true by default)\n         * @param {Boolean} [options.withCredentials=true]\n         * @param {String} [options.handleAs='json']\n         * @returns {Promise} request promise\n         **/\n        $http(options){ //THIS IS A PLACEHOLDER!!! I attached the function at init because the `<iron-component-page>` wasn't recognizing it\n            /**\n             * Fired when XHR request is sent\n             * @event request-sent\n             */\n            return ajax(options);\n        }\n    };\n\n})();\n"],"sourceRoot":"/source/"}