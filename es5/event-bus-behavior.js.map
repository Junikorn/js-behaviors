{"version":3,"sources":["event-bus-behavior.js"],"names":[],"mappings":";;;;;;AAAA,CAAC,YAAU;AACP,gBAAY,CAAC;;AAEb,UAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC;;AAE5B,QAAI,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;;QAErB,iBAAiB;AACR,iBADT,iBAAiB,CACP,OAAO,EAAE;kCADnB,iBAAiB;;AAEf,gBAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACpB,gBAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SAC1B;;;;;;;;;;;;;qBAJC,iBAAiB;;mBAQf,cAAC,KAAK,EAAE,IAAI,EAAC;;;AACb,0BAAU,CAAC,OAAO,CAAC,UAAC,GAAG,EAAK;AACxB,wBAAG,GAAG,CAAC,KAAK,CAAC,EAAC;AACV,2BAAG,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAK;AACxB,gCAAG;AACC,mCAAG,CAAC;AACA,wCAAI,EAAE,KAAK;AACX,0CAAM,EAAE,IAAI;AACZ,6CAAS,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;AAC/B,iDAAa,EAAE,MAAK,OAAO;iCAC9B,CAAC,CAAC;6BACN,CAAA,OAAM,CAAC,EAAC;AACL,uCAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;6BACnB;yBACJ,CAAC,CAAC;qBACN;iBACJ,CAAC,CAAC;aACN;;;;;;;mBAIe,0BAAC,KAAK,EAAE,QAAQ,EAAC;AAC7B,oBAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,IAAI,GAAG,EAAE,CAAC;AAC3D,oBAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACpC,uBAAO;AACH,qBAAC,EAAE,KAAK;AACR,qBAAC,EAAE,QAAQ;iBACd,CAAC;aACL;;;;;;;mBAIkB,6BAAC,UAAU,EAAC;AAC3B,oBAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;aACrD;;;;;;;mBAIQ,qBAAE;AACP,0BAAU,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAClC;;;;;;;mBAIU,uBAAE;AACT,0BAAU,UAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACrC;;;eAtDC,iBAAiB;;;AA+DvB,MAAE,CAAC,wBAAwB,GAAG;AAC1B,kBAAU,EAAE;;;;;;;;;;;;AAYR,cAAE,EAAE;AACA,oBAAI,EAAE,MAAM;AACZ,qBAAK,EAAE,iBAAU;AACb,2BAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;iBACtC;aACJ;SACJ;AACD,gBAAQ,EAAA,oBAAE;AACN,gBAAI,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC;SACvB;AACD,gBAAQ,EAAA,oBAAE;AACN,gBAAI,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC;SACzB;KACJ,CAAC;CAEL,CAAA,EAAG,CAAC","file":"event-bus-behavior.js","sourcesContent":["(function(){\n    'use strict';\n\n    window.JS = window.JS || {};\n\n    var connectors = new Set(); //list of all subscribed connectors\n\n    class EventBusConnector{\n        constructor(element) {\n            this.connector = {};\n            this.element = element;\n        }\n        /**\n         * @method $e.fire\n         */\n        fire(event, data){\n            connectors.forEach((val) => {\n                if(val[event]){\n                    val[event].forEach((val) => {\n                        try{\n                            val({\n                                type: event,\n                                detail: data,\n                                timeStamp: new Date().getTime(),\n                                sourceElement: this.element\n                            });\n                        }catch(e){\n                            console.warn(e);\n                        }\n                    });\n                }\n            });\n        }\n        /**\n         * @method $e.addEventListener\n         */\n        addEventListener(event, callback){\n            this.connector[event] = this.connector[event] || new Set();\n            this.connector[event].add(callback);\n            return {\n                e: event,\n                c: callback\n            };\n        }\n        /**\n         * @method $e.removeEventListener\n         */\n        removeEventListener(descriptor){\n            this.connector[descriptor.e].remove(descriptor.c);\n        }\n        /**\n         * @method $e.subscribe\n         */\n        subscribe(){\n            connectors.add(this.connector);\n        }\n        /**\n         * @method $e.unsubscribe\n         */\n        unsubscribe(){\n            connectors.delete(this.connector);\n        }\n    }\n\n    /**\n     * `JS.EventBusListenerBehavior` allows to use `$e` property as event bus connecting all listeners.\n     * Behavior replaces `<iron-signals>` element functionality without the need of adding any markup to extended elements `<template>`.\n     *\n     * @polymerBehavior\n     */\n    JS.EventBusListenerBehavior = {\n        properties: {\n            /**\n             * EventBusConnector instance\n             *\n             * Available methods:\n             * - `addEventListener(eventName, callback)` - adds event listener to bus and returns EventListenerDescriptor\n             * - `removeEventListener(eventListenerDescriptor)` - removes event listener from bus\n             * - `fire(eventName, details)` - fires event on bus\n             * - `unsubscribe()` - unsubscribes from event bus\n             * - `subscribe()` - subscribes to event bus\n             * @default new EventBusConnector()\n             */\n            $e: {\n                type: Object,\n                value: function(){\n                    return new EventBusConnector(this);\n                }\n            }\n        },\n        attached(){\n            this.$e.subscribe();\n        },\n        detached(){\n            this.$e.unsubscribe();\n        }\n    };\n\n})();\n"],"sourceRoot":"/source/"}